/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Orbit.Api.Client;
using Orbit.Api.Model;

namespace Orbit.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IActivitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List activities for a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>List&lt;Activity&gt;</returns>
        List<Activity> WorkspaceSlugActivitiesGet (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null);

        /// <summary>
        /// List activities for a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        ApiResponse<List<Activity>> WorkspaceSlugActivitiesGetWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null);
        /// <summary>
        /// Get an activity in the workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void WorkspaceSlugActivitiesIdGet (string workspaceSlug, string id);

        /// <summary>
        /// Get an activity in the workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugActivitiesIdGetWithHttpInfo (string workspaceSlug, string id);
        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member
        /// </summary>
        /// <remarks>
        /// Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugActivitiesPost (string workspaceSlug, ActivityAndIdentity body = null);

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member
        /// </summary>
        /// <remarks>
        /// Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugActivitiesPostWithHttpInfo (string workspaceSlug, ActivityAndIdentity body = null);
        /// <summary>
        /// List activities for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugActivitiesGet (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null);

        /// <summary>
        /// List activities for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesGetWithHttpInfo (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null);
        /// <summary>
        /// Delete a post activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugActivitiesIdDelete (string workspaceSlug, string memberSlug, string id);

        /// <summary>
        /// Delete a post activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesIdDeleteWithHttpInfo (string workspaceSlug, string memberSlug, string id);
        /// <summary>
        /// Update a custom activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugActivitiesIdPut (string workspaceSlug, string memberSlug, string id, Activity body = null);

        /// <summary>
        /// Update a custom activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesIdPutWithHttpInfo (string workspaceSlug, string memberSlug, string id, Activity body = null);
        /// <summary>
        /// Create a Custom or a Content activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugActivitiesPost (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null);

        /// <summary>
        /// Create a Custom or a Content activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesPostWithHttpInfo (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List activities for a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        System.Threading.Tasks.Task<List<Activity>> WorkspaceSlugActivitiesGetAsync (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null);

        /// <summary>
        /// List activities for a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Activity>>> WorkspaceSlugActivitiesGetAsyncWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null);
        /// <summary>
        /// Get an activity in the workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugActivitiesIdGetAsync (string workspaceSlug, string id);

        /// <summary>
        /// Get an activity in the workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugActivitiesIdGetAsyncWithHttpInfo (string workspaceSlug, string id);
        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member
        /// </summary>
        /// <remarks>
        /// Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugActivitiesPostAsync (string workspaceSlug, ActivityAndIdentity body = null);

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member
        /// </summary>
        /// <remarks>
        /// Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugActivitiesPostAsyncWithHttpInfo (string workspaceSlug, ActivityAndIdentity body = null);
        /// <summary>
        /// List activities for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesGetAsync (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null);

        /// <summary>
        /// List activities for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesGetAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null);
        /// <summary>
        /// Delete a post activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesIdDeleteAsync (string workspaceSlug, string memberSlug, string id);

        /// <summary>
        /// Delete a post activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesIdDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string id);
        /// <summary>
        /// Update a custom activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesIdPutAsync (string workspaceSlug, string memberSlug, string id, Activity body = null);

        /// <summary>
        /// Update a custom activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesIdPutAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string id, Activity body = null);
        /// <summary>
        /// Create a Custom or a Content activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesPostAsync (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null);

        /// <summary>
        /// Create a Custom or a Content activity for a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesPostAsyncWithHttpInfo (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ActivitiesApi : IActivitiesApi
    {
        private Orbit.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivitiesApi(String basePath)
        {
            this.Configuration = new Orbit.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActivitiesApi()
        {
            this.Configuration = Orbit.Api.Client.Configuration.Default;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivitiesApi(Orbit.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Orbit.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Orbit.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Orbit.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List activities for a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>List&lt;Activity&gt;</returns>
        public List<Activity> WorkspaceSlugActivitiesGet (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null)
        {
             ApiResponse<List<Activity>> localVarResponse = WorkspaceSlugActivitiesGetWithHttpInfo(workspaceSlug, activityTags, affiliation, memberTags, orbitLevel, activityType, weight, identity, location, company, startDate, endDate, page, direction, items, sort, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List activities for a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        public ApiResponse< List<Activity> > WorkspaceSlugActivitiesGetWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesGet");

            var localVarPath = "./{workspace_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (activityTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tags", activityTags)); // query parameter
            if (affiliation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliation", affiliation)); // query parameter
            if (memberTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_tags", memberTags)); // query parameter
            if (orbitLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orbit_level", orbitLevel)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (weight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight", weight)); // query parameter
            if (identity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity", identity)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Activity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Activity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
        }

        /// <summary>
        /// List activities for a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        public async System.Threading.Tasks.Task<List<Activity>> WorkspaceSlugActivitiesGetAsync (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null)
        {
             ApiResponse<List<Activity>> localVarResponse = await WorkspaceSlugActivitiesGetAsyncWithHttpInfo(workspaceSlug, activityTags, affiliation, memberTags, orbitLevel, activityType, weight, identity, location, company, startDate, endDate, page, direction, items, sort, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List activities for a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Activity>>> WorkspaceSlugActivitiesGetAsyncWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string page = null, string direction = null, string items = null, string sort = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesGet");

            var localVarPath = "./{workspace_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (activityTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tags", activityTags)); // query parameter
            if (affiliation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliation", affiliation)); // query parameter
            if (memberTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_tags", memberTags)); // query parameter
            if (orbitLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orbit_level", orbitLevel)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (weight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight", weight)); // query parameter
            if (identity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity", identity)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Activity>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Activity>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Activity>)));
        }

        /// <summary>
        /// Get an activity in the workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void WorkspaceSlugActivitiesIdGet (string workspaceSlug, string id)
        {
             WorkspaceSlugActivitiesIdGetWithHttpInfo(workspaceSlug, id);
        }

        /// <summary>
        /// Get an activity in the workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugActivitiesIdGetWithHttpInfo (string workspaceSlug, string id)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugActivitiesIdGet");

            var localVarPath = "./{workspace_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an activity in the workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugActivitiesIdGetAsync (string workspaceSlug, string id)
        {
             await WorkspaceSlugActivitiesIdGetAsyncWithHttpInfo(workspaceSlug, id);

        }

        /// <summary>
        /// Get an activity in the workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugActivitiesIdGetAsyncWithHttpInfo (string workspaceSlug, string id)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugActivitiesIdGet");

            var localVarPath = "./{workspace_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugActivitiesPost (string workspaceSlug, ActivityAndIdentity body = null)
        {
             WorkspaceSlugActivitiesPostWithHttpInfo(workspaceSlug, body);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugActivitiesPostWithHttpInfo (string workspaceSlug, ActivityAndIdentity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesPost");

            var localVarPath = "./{workspace_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugActivitiesPostAsync (string workspaceSlug, ActivityAndIdentity body = null)
        {
             await WorkspaceSlugActivitiesPostAsyncWithHttpInfo(workspaceSlug, body);

        }

        /// <summary>
        /// Create a Custom or a Content activity for a new or existing member Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugActivitiesPostAsyncWithHttpInfo (string workspaceSlug, ActivityAndIdentity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugActivitiesPost");

            var localVarPath = "./{workspace_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugActivitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List activities for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugActivitiesGet (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null)
        {
             WorkspaceSlugMembersMemberSlugActivitiesGetWithHttpInfo(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type);
        }

        /// <summary>
        /// List activities for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesGetWithHttpInfo (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesGet");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesGet");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List activities for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesGetAsync (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null)
        {
             await WorkspaceSlugMembersMemberSlugActivitiesGetAsyncWithHttpInfo(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type);

        }

        /// <summary>
        /// List activities for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesGetAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string page = null, string direction = null, string items = null, string sort = null, string activityType = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesGet");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesGet");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a post activity 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugActivitiesIdDelete (string workspaceSlug, string memberSlug, string id)
        {
             WorkspaceSlugMembersMemberSlugActivitiesIdDeleteWithHttpInfo(workspaceSlug, memberSlug, id);
        }

        /// <summary>
        /// Delete a post activity 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesIdDeleteWithHttpInfo (string workspaceSlug, string memberSlug, string id)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a post activity 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesIdDeleteAsync (string workspaceSlug, string memberSlug, string id)
        {
             await WorkspaceSlugMembersMemberSlugActivitiesIdDeleteAsyncWithHttpInfo(workspaceSlug, memberSlug, id);

        }

        /// <summary>
        /// Delete a post activity 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesIdDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string id)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a custom activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugActivitiesIdPut (string workspaceSlug, string memberSlug, string id, Activity body = null)
        {
             WorkspaceSlugMembersMemberSlugActivitiesIdPutWithHttpInfo(workspaceSlug, memberSlug, id, body);
        }

        /// <summary>
        /// Update a custom activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesIdPutWithHttpInfo (string workspaceSlug, string memberSlug, string id, Activity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a custom activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesIdPutAsync (string workspaceSlug, string memberSlug, string id, Activity body = null)
        {
             await WorkspaceSlugMembersMemberSlugActivitiesIdPutAsyncWithHttpInfo(workspaceSlug, memberSlug, id, body);

        }

        /// <summary>
        /// Update a custom activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesIdPutAsyncWithHttpInfo (string workspaceSlug, string memberSlug, string id, Activity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesIdPut");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugActivitiesPost (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null)
        {
             WorkspaceSlugMembersMemberSlugActivitiesPostWithHttpInfo(workspaceSlug, memberSlug, body);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugActivitiesPostWithHttpInfo (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesPost");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesPost");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create a Custom or a Content activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugActivitiesPostAsync (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null)
        {
             await WorkspaceSlugMembersMemberSlugActivitiesPostAsyncWithHttpInfo(workspaceSlug, memberSlug, body);

        }

        /// <summary>
        /// Create a Custom or a Content activity for a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugActivitiesPostAsyncWithHttpInfo (string workspaceSlug, string memberSlug, CustomOrPostActivity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesPost");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling ActivitiesApi->WorkspaceSlugMembersMemberSlugActivitiesPost");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugActivitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
