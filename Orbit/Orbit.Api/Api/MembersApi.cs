/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Orbit.Api.Client;
using Orbit.Api.Model;

namespace Orbit.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMembersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find a member by an identity
        /// </summary>
        /// <remarks>
        /// Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersFindGet (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null);

        /// <summary>
        /// Find a member by an identity
        /// </summary>
        /// <remarks>
        /// Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersFindGetWithHttpInfo (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null);
        /// <summary>
        /// List members in a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersGet (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null);

        /// <summary>
        /// List members in a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersGetWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null);
        /// <summary>
        /// Delete a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugDelete (string workspaceSlug, string memberSlug);

        /// <summary>
        /// Delete a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugDeleteWithHttpInfo (string workspaceSlug, string memberSlug);
        /// <summary>
        /// Get a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugGet (string workspaceSlug, string memberSlug);

        /// <summary>
        /// Get a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugGetWithHttpInfo (string workspaceSlug, string memberSlug);
        /// <summary>
        /// Remove identity from a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugIdentitiesDelete (string workspaceSlug, string memberSlug, Identity body = null);

        /// <summary>
        /// Remove identity from a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugIdentitiesDeleteWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null);
        /// <summary>
        /// Add identity to a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugIdentitiesPost (string workspaceSlug, string memberSlug, Identity body = null);

        /// <summary>
        /// Add identity to a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugIdentitiesPostWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null);
        /// <summary>
        /// Update a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersMemberSlugPut (string workspaceSlug, string memberSlug, Member body = null);

        /// <summary>
        /// Update a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersMemberSlugPutWithHttpInfo (string workspaceSlug, string memberSlug, Member body = null);
        /// <summary>
        /// Create or update a member
        /// </summary>
        /// <remarks>
        /// This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void WorkspaceSlugMembersPost (string workspaceSlug, MemberAndIdentity body = null);

        /// <summary>
        /// Create or update a member
        /// </summary>
        /// <remarks>
        /// This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspaceSlugMembersPostWithHttpInfo (string workspaceSlug, MemberAndIdentity body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find a member by an identity
        /// </summary>
        /// <remarks>
        /// Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersFindGetAsync (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null);

        /// <summary>
        /// Find a member by an identity
        /// </summary>
        /// <remarks>
        /// Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersFindGetAsyncWithHttpInfo (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null);
        /// <summary>
        /// List members in a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersGetAsync (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null);

        /// <summary>
        /// List members in a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersGetAsyncWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null);
        /// <summary>
        /// Delete a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugDeleteAsync (string workspaceSlug, string memberSlug);

        /// <summary>
        /// Delete a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug);
        /// <summary>
        /// Get a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugGetAsync (string workspaceSlug, string memberSlug);

        /// <summary>
        /// Get a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugGetAsyncWithHttpInfo (string workspaceSlug, string memberSlug);
        /// <summary>
        /// Remove identity from a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugIdentitiesDeleteAsync (string workspaceSlug, string memberSlug, Identity body = null);

        /// <summary>
        /// Remove identity from a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugIdentitiesDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null);
        /// <summary>
        /// Add identity to a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugIdentitiesPostAsync (string workspaceSlug, string memberSlug, Identity body = null);

        /// <summary>
        /// Add identity to a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugIdentitiesPostAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null);
        /// <summary>
        /// Update a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugPutAsync (string workspaceSlug, string memberSlug, Member body = null);

        /// <summary>
        /// Update a member
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugPutAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Member body = null);
        /// <summary>
        /// Create or update a member
        /// </summary>
        /// <remarks>
        /// This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspaceSlugMembersPostAsync (string workspaceSlug, MemberAndIdentity body = null);

        /// <summary>
        /// Create or update a member
        /// </summary>
        /// <remarks>
        /// This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersPostAsyncWithHttpInfo (string workspaceSlug, MemberAndIdentity body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MembersApi : IMembersApi
    {
        private Orbit.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembersApi(String basePath)
        {
            this.Configuration = new Orbit.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class
        /// </summary>
        /// <returns></returns>
        public MembersApi()
        {
            this.Configuration = Orbit.Api.Client.Configuration.Default;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MembersApi(Orbit.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Orbit.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Orbit.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Orbit.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find a member by an identity Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersFindGet (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null)
        {
             WorkspaceSlugMembersFindGetWithHttpInfo(workspaceSlug, source, sourceHost, uid, username, email, github);
        }

        /// <summary>
        /// Find a member by an identity Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersFindGetWithHttpInfo (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersFindGet");

            var localVarPath = "./{workspace_slug}/members/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (sourceHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_host", sourceHost)); // query parameter
            if (uid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uid", uid)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (github != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "github", github)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersFindGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Find a member by an identity Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersFindGetAsync (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null)
        {
             await WorkspaceSlugMembersFindGetAsyncWithHttpInfo(workspaceSlug, source, sourceHost, uid, username, email, github);

        }

        /// <summary>
        /// Find a member by an identity Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="source"> (optional)</param>
        /// <param name="sourceHost"> (optional)</param>
        /// <param name="uid"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="github">Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersFindGetAsyncWithHttpInfo (string workspaceSlug, string source = null, string sourceHost = null, string uid = null, string username = null, string email = null, string github = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersFindGet");

            var localVarPath = "./{workspace_slug}/members/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter
            if (sourceHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_host", sourceHost)); // query parameter
            if (uid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uid", uid)); // query parameter
            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (github != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "github", github)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersFindGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List members in a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersGet (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null)
        {
             WorkspaceSlugMembersGetWithHttpInfo(workspaceSlug, activityTags, affiliation, memberTags, orbitLevel, activityType, weight, identity, location, company, startDate, endDate, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type);
        }

        /// <summary>
        /// List members in a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersGetWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersGet");

            var localVarPath = "./{workspace_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (activityTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tags", activityTags)); // query parameter
            if (affiliation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliation", affiliation)); // query parameter
            if (memberTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_tags", memberTags)); // query parameter
            if (orbitLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orbit_level", orbitLevel)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (weight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight", weight)); // query parameter
            if (identity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity", identity)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (activitiesCountMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activities_count_min", activitiesCountMin)); // query parameter
            if (activitiesCountMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activities_count_max", activitiesCountMax)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List members in a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersGetAsync (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null)
        {
             await WorkspaceSlugMembersGetAsyncWithHttpInfo(workspaceSlug, activityTags, affiliation, memberTags, orbitLevel, activityType, weight, identity, location, company, startDate, endDate, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type);

        }

        /// <summary>
        /// List members in a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="activityTags"> (optional)</param>
        /// <param name="affiliation"> (optional)</param>
        /// <param name="memberTags"> (optional)</param>
        /// <param name="orbitLevel"> (optional)</param>
        /// <param name="activityType"> (optional)</param>
        /// <param name="weight"> (optional)</param>
        /// <param name="identity"> (optional)</param>
        /// <param name="location"> (optional)</param>
        /// <param name="company"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="items"> (optional)</param>
        /// <param name="activitiesCountMin"> (optional)</param>
        /// <param name="activitiesCountMax"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersGetAsyncWithHttpInfo (string workspaceSlug, string activityTags = null, string affiliation = null, string memberTags = null, string orbitLevel = null, string activityType = null, string weight = null, string identity = null, string location = null, string company = null, string startDate = null, string endDate = null, string query = null, string page = null, string direction = null, string items = null, string activitiesCountMin = null, string activitiesCountMax = null, string sort = null, string type = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersGet");

            var localVarPath = "./{workspace_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (activityTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_tags", activityTags)); // query parameter
            if (affiliation != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "affiliation", affiliation)); // query parameter
            if (memberTags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_tags", memberTags)); // query parameter
            if (orbitLevel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orbit_level", orbitLevel)); // query parameter
            if (activityType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activity_type", activityType)); // query parameter
            if (weight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "weight", weight)); // query parameter
            if (identity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identity", identity)); // query parameter
            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "location", location)); // query parameter
            if (company != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "company", company)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (items != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "items", items)); // query parameter
            if (activitiesCountMin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activities_count_min", activitiesCountMin)); // query parameter
            if (activitiesCountMax != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "activities_count_max", activitiesCountMax)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugDelete (string workspaceSlug, string memberSlug)
        {
             WorkspaceSlugMembersMemberSlugDeleteWithHttpInfo(workspaceSlug, memberSlug);
        }

        /// <summary>
        /// Delete a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugDeleteWithHttpInfo (string workspaceSlug, string memberSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugDeleteAsync (string workspaceSlug, string memberSlug)
        {
             await WorkspaceSlugMembersMemberSlugDeleteAsyncWithHttpInfo(workspaceSlug, memberSlug);

        }

        /// <summary>
        /// Delete a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugGet (string workspaceSlug, string memberSlug)
        {
             WorkspaceSlugMembersMemberSlugGetWithHttpInfo(workspaceSlug, memberSlug);
        }

        /// <summary>
        /// Get a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugGetWithHttpInfo (string workspaceSlug, string memberSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugGet");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugGet");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugGetAsync (string workspaceSlug, string memberSlug)
        {
             await WorkspaceSlugMembersMemberSlugGetAsyncWithHttpInfo(workspaceSlug, memberSlug);

        }

        /// <summary>
        /// Get a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugGetAsyncWithHttpInfo (string workspaceSlug, string memberSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugGet");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugGet");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove identity from a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugIdentitiesDelete (string workspaceSlug, string memberSlug, Identity body = null)
        {
             WorkspaceSlugMembersMemberSlugIdentitiesDeleteWithHttpInfo(workspaceSlug, memberSlug, body);
        }

        /// <summary>
        /// Remove identity from a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugIdentitiesDeleteWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugIdentitiesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove identity from a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugIdentitiesDeleteAsync (string workspaceSlug, string memberSlug, Identity body = null)
        {
             await WorkspaceSlugMembersMemberSlugIdentitiesDeleteAsyncWithHttpInfo(workspaceSlug, memberSlug, body);

        }

        /// <summary>
        /// Remove identity from a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugIdentitiesDeleteAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesDelete");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesDelete");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugIdentitiesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add identity to a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugIdentitiesPost (string workspaceSlug, string memberSlug, Identity body = null)
        {
             WorkspaceSlugMembersMemberSlugIdentitiesPostWithHttpInfo(workspaceSlug, memberSlug, body);
        }

        /// <summary>
        /// Add identity to a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugIdentitiesPostWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesPost");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesPost");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugIdentitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add identity to a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugIdentitiesPostAsync (string workspaceSlug, string memberSlug, Identity body = null)
        {
             await WorkspaceSlugMembersMemberSlugIdentitiesPostAsyncWithHttpInfo(workspaceSlug, memberSlug, body);

        }

        /// <summary>
        /// Add identity to a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugIdentitiesPostAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Identity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesPost");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugIdentitiesPost");

            var localVarPath = "./{workspace_slug}/members/{member_slug}/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugIdentitiesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersMemberSlugPut (string workspaceSlug, string memberSlug, Member body = null)
        {
             WorkspaceSlugMembersMemberSlugPutWithHttpInfo(workspaceSlug, memberSlug, body);
        }

        /// <summary>
        /// Update a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersMemberSlugPutWithHttpInfo (string workspaceSlug, string memberSlug, Member body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugPut");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugPut");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersMemberSlugPutAsync (string workspaceSlug, string memberSlug, Member body = null)
        {
             await WorkspaceSlugMembersMemberSlugPutAsyncWithHttpInfo(workspaceSlug, memberSlug, body);

        }

        /// <summary>
        /// Update a member 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="memberSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersMemberSlugPutAsyncWithHttpInfo (string workspaceSlug, string memberSlug, Member body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugPut");
            // verify the required parameter 'memberSlug' is set
            if (memberSlug == null)
                throw new ApiException(400, "Missing required parameter 'memberSlug' when calling MembersApi->WorkspaceSlugMembersMemberSlugPut");

            var localVarPath = "./{workspace_slug}/members/{member_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (memberSlug != null) localVarPathParams.Add("member_slug", this.Configuration.ApiClient.ParameterToString(memberSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersMemberSlugPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create or update a member This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void WorkspaceSlugMembersPost (string workspaceSlug, MemberAndIdentity body = null)
        {
             WorkspaceSlugMembersPostWithHttpInfo(workspaceSlug, body);
        }

        /// <summary>
        /// Create or update a member This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspaceSlugMembersPostWithHttpInfo (string workspaceSlug, MemberAndIdentity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersPost");

            var localVarPath = "./{workspace_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create or update a member This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspaceSlugMembersPostAsync (string workspaceSlug, MemberAndIdentity body = null)
        {
             await WorkspaceSlugMembersPostAsyncWithHttpInfo(workspaceSlug, body);

        }

        /// <summary>
        /// Create or update a member This method is useful when you know a member&#x27;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspaceSlugMembersPostAsyncWithHttpInfo (string workspaceSlug, MemberAndIdentity body = null)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling MembersApi->WorkspaceSlugMembersPost");

            var localVarPath = "./{workspace_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspaceSlugMembersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
