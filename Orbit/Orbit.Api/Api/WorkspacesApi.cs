/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Orbit.Api.Client;
using Orbit.Api.Model;

namespace Orbit.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IWorkspacesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all workspaces for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Workspace&gt;</returns>
        List<Workspace> WorkspacesGet ();

        /// <summary>
        /// Get all workspaces for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Workspace&gt;</returns>
        ApiResponse<List<Workspace>> WorkspacesGetWithHttpInfo ();
        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns></returns>
        void WorkspacesWorkspaceSlugGet (string workspaceSlug);

        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkspacesWorkspaceSlugGetWithHttpInfo (string workspaceSlug);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all workspaces for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Workspace&gt;</returns>
        System.Threading.Tasks.Task<List<Workspace>> WorkspacesGetAsync ();

        /// <summary>
        /// Get all workspaces for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Workspace&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Workspace>>> WorkspacesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkspacesWorkspaceSlugGetAsync (string workspaceSlug);

        /// <summary>
        /// Get a workspace
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesWorkspaceSlugGetAsyncWithHttpInfo (string workspaceSlug);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class WorkspacesApi : IWorkspacesApi
    {
        private Orbit.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi(String basePath)
        {
            this.Configuration = new Orbit.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// </summary>
        /// <returns></returns>
        public WorkspacesApi()
        {
            this.Configuration = Orbit.Api.Client.Configuration.Default;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkspacesApi(Orbit.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Orbit.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Orbit.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Orbit.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Orbit.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all workspaces for the current user 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Workspace&gt;</returns>
        public List<Workspace> WorkspacesGet ()
        {
             ApiResponse<List<Workspace>> localVarResponse = WorkspacesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all workspaces for the current user 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Workspace&gt;</returns>
        public ApiResponse< List<Workspace> > WorkspacesGetWithHttpInfo ()
        {

            var localVarPath = "./workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Workspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workspace>)));
        }

        /// <summary>
        /// Get all workspaces for the current user 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Workspace&gt;</returns>
        public async System.Threading.Tasks.Task<List<Workspace>> WorkspacesGetAsync ()
        {
             ApiResponse<List<Workspace>> localVarResponse = await WorkspacesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all workspaces for the current user 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Workspace&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Workspace>>> WorkspacesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./workspaces";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Workspace>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<Workspace>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Workspace>)));
        }

        /// <summary>
        /// Get a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns></returns>
        public void WorkspacesWorkspaceSlugGet (string workspaceSlug)
        {
             WorkspacesWorkspaceSlugGetWithHttpInfo(workspaceSlug);
        }

        /// <summary>
        /// Get a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkspacesWorkspaceSlugGetWithHttpInfo (string workspaceSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling WorkspacesApi->WorkspacesWorkspaceSlugGet");

            var localVarPath = "./workspaces/{workspace_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkspacesWorkspaceSlugGetAsync (string workspaceSlug)
        {
             await WorkspacesWorkspaceSlugGetAsyncWithHttpInfo(workspaceSlug);

        }

        /// <summary>
        /// Get a workspace 
        /// </summary>
        /// <exception cref="Orbit.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workspaceSlug"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkspacesWorkspaceSlugGetAsyncWithHttpInfo (string workspaceSlug)
        {
            // verify the required parameter 'workspaceSlug' is set
            if (workspaceSlug == null)
                throw new ApiException(400, "Missing required parameter 'workspaceSlug' when calling WorkspacesApi->WorkspacesWorkspaceSlugGet");

            var localVarPath = "./workspaces/{workspace_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (workspaceSlug != null) localVarPathParams.Add("workspace_slug", this.Configuration.ApiClient.ParameterToString(workspaceSlug)); // path parameter
            // authentication (bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkspacesWorkspaceSlugGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

    }
}
