/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Orbit.Api.Client.SwaggerDateConverter;

namespace Orbit.Api.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract]
        public partial class Activity :  IEquatable<Activity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="description">A description of the activity; displayed in the timeline.</param>
        /// <param name="link">A URL for the activity; displayed in the timeline.</param>
        /// <param name="linkText">The text for the timeline link.</param>
        /// <param name="title">A title for the activity; displayed in the timeline (required).</param>
        /// <param name="weight">A custom weight to be used in filters and reports; defaults to 1..</param>
        /// <param name="activityType">The type of activity - what action was done by the member.</param>
        /// <param name="key">Supply a key that must be unique or leave blank to have one generated..</param>
        /// <param name="occurredAt">The date and time the activity occurred; defaults to now.</param>
        /// <param name="tags">[EXPERIMENTAL] Capture facets of the activity to group by later e.g. locations or channels; replaces existing value.</param>
        public Activity(string description = default(string), string link = default(string), string linkText = default(string), string title = default(string), string weight = default(string), string activityType = default(string), string key = default(string), string occurredAt = default(string), List<string> tags = default(List<string>))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for Activity and cannot be null");
            }
            else
            {
                this.Title = title;
            }
            this.Description = description;
            this.Link = link;
            this.LinkText = linkText;
            this.Weight = weight;
            this.ActivityType = activityType;
            this.Key = key;
            this.OccurredAt = occurredAt;
            this.Tags = tags;
        }
        
        /// <summary>
        /// A description of the activity; displayed in the timeline
        /// </summary>
        /// <value>A description of the activity; displayed in the timeline</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A URL for the activity; displayed in the timeline
        /// </summary>
        /// <value>A URL for the activity; displayed in the timeline</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// The text for the timeline link
        /// </summary>
        /// <value>The text for the timeline link</value>
        [DataMember(Name="link_text", EmitDefaultValue=false)]
        public string LinkText { get; set; }

        /// <summary>
        /// A title for the activity; displayed in the timeline
        /// </summary>
        /// <value>A title for the activity; displayed in the timeline</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// A custom weight to be used in filters and reports; defaults to 1.
        /// </summary>
        /// <value>A custom weight to be used in filters and reports; defaults to 1.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// The type of activity - what action was done by the member
        /// </summary>
        /// <value>The type of activity - what action was done by the member</value>
        [DataMember(Name="activity_type", EmitDefaultValue=false)]
        public string ActivityType { get; set; }

        /// <summary>
        /// Supply a key that must be unique or leave blank to have one generated.
        /// </summary>
        /// <value>Supply a key that must be unique or leave blank to have one generated.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The date and time the activity occurred; defaults to now
        /// </summary>
        /// <value>The date and time the activity occurred; defaults to now</value>
        [DataMember(Name="occurred_at", EmitDefaultValue=false)]
        public string OccurredAt { get; set; }

        /// <summary>
        /// [EXPERIMENTAL] Capture facets of the activity to group by later e.g. locations or channels; replaces existing value
        /// </summary>
        /// <value>[EXPERIMENTAL] Capture facets of the activity to group by later e.g. locations or channels; replaces existing value</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  LinkText: ").Append(LinkText).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Activity);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="input">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.LinkText == input.LinkText ||
                    (this.LinkText != null &&
                    this.LinkText.Equals(input.LinkText))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.OccurredAt == input.OccurredAt ||
                    (this.OccurredAt != null &&
                    this.OccurredAt.Equals(input.OccurredAt))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.LinkText != null)
                    hashCode = hashCode * 59 + this.LinkText.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.OccurredAt != null)
                    hashCode = hashCode * 59 + this.OccurredAt.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }
    }
}
