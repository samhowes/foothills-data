/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
#pragma warning disable 8625


namespace Orbit.Api.Model
{
    /// <summary>
    /// ActivityWithMember
    /// </summary>
    [DataContract]
        public partial class ActivityWithMember : Activity,  IEquatable<ActivityWithMember>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityWithMember" /> class.
        /// </summary>
        /// <param name="member">member.</param>
        public ActivityWithMember(Member member = default(Member), string description = default(string), string link = default(string), string linkText = default(string), string title = default(string), string weight = default(string), string activityType = default(string), string key = default(string), string occurredAt = default(string), List<string> tags = default(List<string>)) : base()
        {
            this.Member = member;
        }
        
        /// <summary>
        /// Gets or Sets Member
        /// </summary>
        [DataMember(Name="member", EmitDefaultValue=false)]
        public Member Member { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivityWithMember {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivityWithMember);
        }

        /// <summary>
        /// Returns true if ActivityWithMember instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivityWithMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivityWithMember input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Member == input.Member ||
                    (this.Member != null &&
                    this.Member.Equals(input.Member))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Member != null)
                    hashCode = hashCode * 59 + this.Member.GetHashCode();
                return hashCode;
            }
        }
    }
}
