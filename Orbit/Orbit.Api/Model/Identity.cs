/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Orbit.Api.Client.SwaggerDateConverter;

namespace Orbit.Api.Model
{
    /// <summary>
    /// Represents an email address, a profile on networks like github and twitter, or a record in another system.
    /// </summary>
    [DataContract]
        public partial class Identity :  IEquatable<Identity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identity" /> class.
        /// </summary>
        /// <param name="name">The name of the person in the source system.</param>
        /// <param name="source">The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used (required).</param>
        /// <param name="sourceHost">Specifies the location of the source, such as the host of a Discourse instance.</param>
        /// <param name="username">The username of the person in the source system.</param>
        /// <param name="uid">The uid of the person in the source system.</param>
        /// <param name="email">The email of the person in the source system.</param>
        /// <param name="url">For custom identities, an optional link to the profile on the source system.</param>
        public Identity(string name = default(string), string source = default(string), string sourceHost = default(string), string username = default(string), string uid = default(string), string email = default(string), string url = default(string))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for Identity and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            this.Name = name;
            this.SourceHost = sourceHost;
            this.Username = username;
            this.Uid = uid;
            this.Email = email;
            this.Url = url;
        }
        
        /// <summary>
        /// The name of the person in the source system
        /// </summary>
        /// <value>The name of the person in the source system</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used
        /// </summary>
        /// <value>The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Specifies the location of the source, such as the host of a Discourse instance
        /// </summary>
        /// <value>Specifies the location of the source, such as the host of a Discourse instance</value>
        [DataMember(Name="source_host", EmitDefaultValue=false)]
        public string SourceHost { get; set; }

        /// <summary>
        /// The username of the person in the source system
        /// </summary>
        /// <value>The username of the person in the source system</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The uid of the person in the source system
        /// </summary>
        /// <value>The uid of the person in the source system</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// The email of the person in the source system
        /// </summary>
        /// <value>The email of the person in the source system</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// For custom identities, an optional link to the profile on the source system
        /// </summary>
        /// <value>For custom identities, an optional link to the profile on the source system</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identity {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  SourceHost: ").Append(SourceHost).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identity);
        }

        /// <summary>
        /// Returns true if Identity instances are equal
        /// </summary>
        /// <param name="input">Instance of Identity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.SourceHost == input.SourceHost ||
                    (this.SourceHost != null &&
                    this.SourceHost.Equals(input.SourceHost))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.SourceHost != null)
                    hashCode = hashCode * 59 + this.SourceHost.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }
    }
}
