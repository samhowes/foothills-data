/* 
 * Orbit API
 *
 * Please see the complete Orbit API documentation at [https://docs.orbit.love/reference](https://docs.orbit.love/reference).
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Orbit.Api.Model
{
    /// <summary>
    /// PostActivity
    /// </summary>
    [DataContract]
        public partial class PostActivity :  IEquatable<PostActivity>
    {
        /// <summary>
        /// Defines ActivityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActivityTypeEnum
        {
            /// <summary>
            /// Enum Content for value: content
            /// </summary>
            [EnumMember(Value = "content")]
            Content = 1        }
        /// <summary>
        /// Gets or Sets ActivityType
        /// </summary>
        [DataMember(Name="activity_type", EmitDefaultValue=false)]
        public ActivityTypeEnum ActivityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostActivity" /> class.
        /// </summary>
        /// <param name="url">The url representing the post (required).</param>
        /// <param name="occurredAt">The date and time at which the content was published; defaults to now.</param>
        /// <param name="activityType">activityType (required).</param>
        public PostActivity(string url = default(string), string occurredAt = default(string), ActivityTypeEnum activityType = default(ActivityTypeEnum))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for PostActivity and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // to ensure "activityType" is required (not null)
            if (activityType == null)
            {
                throw new InvalidDataException("activityType is a required property for PostActivity and cannot be null");
            }
            else
            {
                this.ActivityType = activityType;
            }
            this.OccurredAt = occurredAt;
        }
        
        /// <summary>
        /// The url representing the post
        /// </summary>
        /// <value>The url representing the post</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The date and time at which the content was published; defaults to now
        /// </summary>
        /// <value>The date and time at which the content was published; defaults to now</value>
        [DataMember(Name="occurred_at", EmitDefaultValue=false)]
        public string OccurredAt { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostActivity {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  OccurredAt: ").Append(OccurredAt).Append("\n");
            sb.Append("  ActivityType: ").Append(ActivityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostActivity);
        }

        /// <summary>
        /// Returns true if PostActivity instances are equal
        /// </summary>
        /// <param name="input">Instance of PostActivity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostActivity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.OccurredAt == input.OccurredAt ||
                    (this.OccurredAt != null &&
                    this.OccurredAt.Equals(input.OccurredAt))
                ) && 
                (
                    this.ActivityType == input.ActivityType ||
                    (this.ActivityType != null &&
                    this.ActivityType.Equals(input.ActivityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.OccurredAt != null)
                    hashCode = hashCode * 59 + this.OccurredAt.GetHashCode();
                if (this.ActivityType != null)
                    hashCode = hashCode * 59 + this.ActivityType.GetHashCode();
                return hashCode;
            }
        }
    }
}
